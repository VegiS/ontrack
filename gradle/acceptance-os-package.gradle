/**
 * Acceptance tests for the OS packages
 */

import net.nemerosa.ontrack.gradle.*

/**
 * Debian tests
 */

task debDockerPrepare(type: Copy) {
    copy {
        from project.properties.acceptanceDebianDistributionDir
        include '*.deb'
        into 'gradle/os-package/docker/debian/'
        rename '.*', 'ontrack.deb'
    }
}

task debDockerRun(type: ComposeUp, dependsOn: debDockerPrepare) {
    machine = project.properties.ciMachine
    dir = file("${rootDir}/gradle/os-package/docker")
    projectFiles = ['docker-compose.yml', 'docker-compose-debian.yml']
    projectName = 'ci-debian'
    forceRecreate = true
}

task debDockerStart(type: DockerExec, dependsOn: debDockerRun) {
    containerName = 'cidebian_ontrack_1'
    commands = [
            start: ['service', 'ontrack', 'start'],
    ]
}

task debDockerStop(type: ComposeStop) {
    machine = project.properties.ciMachine
    dir = file("${rootDir}/gradle/os-package/docker")
    projectFiles = ['docker-compose.yml', 'docker-compose-debian.yml']
    projectName = 'ci-debian'
    remove = true
}

task debAcceptanceTest(type: RemoteAcceptanceTest) {
    acceptanceUrl = { "http://${project.properties.acceptanceHost}:${debDockerRun.getPublishedPort('ontrack', 8080)}" }
    acceptanceContext = 'smoke' // Only basic test
    disableSsl = true
    dependsOn debDockerStart
    finalizedBy debDockerStop
}

/**
 * RPM tests
 */

['7', '6'].each { centOsVersion ->

    tasks.create("rpmDockerPrepare${centOsVersion}", Copy) {
        copy {
            from project.properties.acceptanceRpmDistributionDir
            include '*.rpm'
            into "gradle/os-package/docker/centos/${centOsVersion}"
            rename '.*', 'ontrack.rpm'
        }
    }

    tasks.create("rpmDockerRun${centOsVersion}", ComposeUp) {
        dependsOn "rpmDockerPrepare${centOsVersion}"
        machine = project.properties.ciMachine
        dir = file("${rootDir}/gradle/os-package/docker")
        projectFiles = ['docker-compose.yml', 'docker-compose-centos.yml']
        environment = [CENTOS_VERSION: centOsVersion]
        projectName = "ci-centos-${centOsVersion}"
        forceRecreate = true
    }

    tasks.create("rpmDockerStart${centOsVersion}", DockerExec) {
        dependsOn "rpmDockerRun${centOsVersion}"
        containerName = "cicentos${centOsVersion}_ontrack_1"
        commands = [
                start: ['/etc/init.d/ontrack', 'start'],
        ]
    }

    tasks.create("rpmDockerStop${centOsVersion}", ComposeStop) {
        machine = project.properties.ciMachine
        dir = file("${rootDir}/gradle/os-package/docker")
        projectFiles = ['docker-compose.yml', 'docker-compose-centos.yml']
        environment = [CENTOS_VERSION: centOsVersion]
        projectName = "ci-centos-${centOsVersion}"
        remove = true
    }

    tasks.create("rpmAcceptanceTest${centOsVersion}", RemoteAcceptanceTest) {
        acceptanceUrl = {
            ComposeUp run = project.tasks.getByName("rpmDockerRun${centOsVersion}") as ComposeUp
            return "http://${project.properties.acceptanceHost}:${run.getPublishedPort('ontrack', 8080)}"
        }
        acceptanceContext = 'smoke' // Only basic test
        disableSsl = true
        dependsOn "rpmDockerStart${centOsVersion}"
        finalizedBy "rpmDockerStop${centOsVersion}"
    }

}
