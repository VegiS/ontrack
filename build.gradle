import net.nemerosa.ontrack.gradle.ComposeStop
import net.nemerosa.ontrack.gradle.ComposeUp
import net.nemerosa.ontrack.gradle.DockerStart
import net.nemerosa.ontrack.gradle.DockerStop

plugins {
    id 'net.nemerosa.versioning' version '1.7.1'
    id 'nebula.os-package' version '2.2.6'
}

/**
 * Meta information
 */

allprojects {
    group = 'net.nemerosa.ontrack'
    version = versioning.info.display
}

/**
 * Dependency management
 */

apply from: "$rootDir/gradle/dependencies.gradle"

/**
 * Build task (used only as an anchor point at the root level)
 */

task build

/**
 * Integration test environment
 */

ext {
    itJdbcUrl = project.properties.itJdbcUrl
    itJdbcUsername = project.properties.itJdbcUsername
    itJdbcPassword = project.properties.itJdbcPassword
}

// Pre-integration tests: starting Postgresql

task preIntegrationTest(type: ComposeUp) {
    machine = project.properties.itMachine
    dir = file("${rootDir}/gradle/it")
    projectFiles = ['docker-compose.yml']
    projectName = project.properties.itProject
    forceRecreate = false
    // When done
    doLast {
        def jdbcUrl = "jdbc:postgresql://${host}:${getPublishedPort('db', 5432)}/ontrack"
        project.ext.itJdbcUrl = jdbcUrl
        logger.info("JDBC URL = ${project.ext.itJdbcUrl}")
    }
}

// Post-integration tests: stopping Postgresql

task postIntegrationTest(type: ComposeStop) {
    machine = project.properties.itMachine
    dir = file("${rootDir}/gradle/it")
    projectFiles = ['docker-compose.yml']
    projectName = project.properties.itProject
    remove = true
}

/**
 * Java projects
 */

ext {
    sourceCompatibility = 1.8
    targetCompatibility = 1.8
}

def javaProjects = subprojects.findAll {
    it.path != ':ontrack-web'
}

configure(javaProjects) {

    /**
     * For all Java projects
     */

    apply plugin: 'java'
    apply plugin: 'maven'

    dependencies {
        // TODO Lombok not to be released
        compile libraries.lombok
        // Testing
        testCompile libraries.junit
        testCompile libraries.mockito
    }

    // Unit tests run with the `test` task
    test {
        include '**/*Test.class'
        reports {
            html.enabled = false
        }
    }

    // Integration tests
    task integrationTest(type: Test, dependsOn: 'test') {
        include '**/*IT.class'
        jvmArgs '-Xmx512m'
        reports {
            html.enabled = false
        }
        dependsOn preIntegrationTest
        finalizedBy postIntegrationTest
        /**
         * Sets the JDBC URL
         */
        doFirst {
            println "Setting JDBC URL for IT: ${rootProject.ext.itJdbcUrl}"
            systemProperty 'it.jdbc.url', rootProject.ext.itJdbcUrl
            systemProperty 'it.jdbc.user', rootProject.ext.itJdbcUsername
            systemProperty 'it.jdbc.password', rootProject.ext.itJdbcPassword
        }
    }

    // Acceptance tests
    task acceptanceTest(type: Test, dependsOn: 'integrationTest') {
        include '**/ACC*.class'
        ignoreFailures true
        reports {
            html.enabled = false
        }
    }

    // Javadoc

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    // Sources

    task sourceJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    // POM file

    task pomFile {
        ext.output = "${buildDir}/poms/${project.name}-${version}.pom"
        doLast {
            pom {
                project {
                    version versioning.info.display
                    name project.name
                    description project.description
                    url 'http://nemerosa.github.io/ontrack'
                    licenses {
                        license {
                            name 'The MIT License (MIT)'
                            url 'http://opensource.org/licenses/MIT'
                            distribution 'repo'
                        }
                    }
                    scm {
                        url 'https://github.com/nemerosa/ontrack'
                        connection 'scm:git://github.com/nemerosa/ontrack'
                        developerConnection 'scm:git:git://github.com/nemerosa/ontrack'
                    }
                    developers {
                        developer {
                            id 'dcoraboeuf'
                            name 'Damien Coraboeuf'
                            email 'damien.coraboeuf@gmail.com'
                        }
                    }
                }
            }.writeTo(output)
        }
    }

    // Archives for Javadoc and Sources

    artifacts {
        archives javadocJar
        archives sourceJar
        archives file: file("${buildDir}/poms/${project.name}-${version}.pom"), type: 'pom', builtBy: pomFile
    }

    assemble.dependsOn 'pomFile'

}

/**
 * Packaging for delivery
 */

apply from: 'gradle/packaging.gradle'

/**
 * Packaging for OS
 */

apply from: 'gradle/os-packaging.gradle'

/**
 * Docker tasks
 */

apply from: 'gradle/docker.gradle'

/**
 * Acceptance tasks
 */

apply from: 'gradle/acceptance.gradle'

/**
 * Development tasks
 */

apply from: 'gradle/development.gradle'

/**
 * Acceptance tasks for OS packaging
 */

apply from: 'gradle/acceptance-os-package.gradle'

/**
 * Publication tasks
 *
 * Standalone Gradle tasks in `gradle/publication.gradle` and in
 * `gradle/production.gradle`
 */

/**
 * General test report
 */

task testReport(type: TestReport) {
    destinationDir = file("$buildDir/reports/allTests")
    // Include the results from the `test` tasks in all Java subprojects
    reportOn javaProjects*.test, javaProjects*.integrationTest, javaProjects*.acceptanceTest
}

/**
 * Wrapper definition
 */

task wrapper(type: Wrapper) {
    gradleVersion = '2.9'
}
