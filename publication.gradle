import net.nemerosa.httpclient.*
import net.nemerosa.httpclient.json.*
import net.nemerosa.ontrack.gradle.OntrackChangeLog

/**
 * Release and publication tasks.
 *
 * Standalone tasks.
 */

buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'net.nemerosa:http-client-json:1.4.1'
        classpath 'net.nemerosa.ontrack:ontrack-dsl:2.17.4'
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
    }
}

/**
 * Maven publication
 */

group = 'net.nemerosa.ontrack'
version = ontrackVersion

apply plugin: 'signing'
apply plugin: 'maven'
apply plugin: 'io.codearte.nexus-staging'

// Gets the list of modules
Properties ontrackProperties = new Properties()
def ontrackPropertyFile = project.file('ontrack.properties')
if (ontrackPropertyFile.exists()) {
    ontrackPropertyFile.withInputStream { ontrackProperties.load(it) }
    ext.modules = ontrackProperties.getProperty('MODULES').split(',').collect { it.trim() }
} else {
    ext.modules = []
}
println "Modules = ${modules}"

artifacts {
    modules.each { module ->
        archives file: file("publication/${module}-${ontrackVersion}.pom"), name: module, type: 'pom'
        archives file: file("publication/${module}-${ontrackVersion}.jar"), name: module
        archives file: file("publication/${module}-${ontrackVersion}-sources.jar"), name: module, classifier: 'sources'
        archives file: file("publication/${module}-${ontrackVersion}-javadoc.jar"), name: module, classifier: 'javadoc'
    }
    // Ontrack DSL
    archives file: file("publication/ontrack-dsl-${ontrackVersion}-shell.jar"), name: 'ontrack-dsl', classifier: 'shell'
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: ossrhUrl) {
                authentication(userName: ossrhUser, password: ossrhPassword)
            }
            modules.each { module ->
                addFilter(module) { artifact, file ->
                    artifact.name == module
                }
                pom(module).artifactId = module
            }
        }
    }
}

nexusStaging {
    packageGroup = 'net.nemerosa'
    username = ossrhUser
    password = ossrhPassword
    numberOfRetries = 60
    delayBetweenRetriesInMillis = 10000 // Workaround for OSSRH-21248
}

/**
 * GitHub publication task tasks
 */

abstract class GitHubTask extends DefaultTask {

    String repository = 'nemerosa/ontrack'
    String gitHubUser = project.properties.gitHubUser
    String gitHubPassword = project.properties.gitHubPassword

    protected def createJsonClient(String url) {
        Client client = ClientBuilder
                .create(url, false)
                .withLogger({ println "[${name}][HTTP] ${it}" })
                .withCredentials(gitHubUser, gitHubPassword)
                .build()
                .withHeader('Accept', 'application/vnd.github+json')
        return new JsonClientImpl(client, true)
    }

    protected def gitHubPost(String url, String path, Map data) {
        return createJsonClient(url).post(data, path)
    }

}

class GitHubReleaseCreate extends GitHubTask {

    String commit = project.properties.ontrackVersionCommit
    String tag = project.properties.ontrackVersion

    private String releaseId

    @TaskAction
    void run() {
        if (!tag) throw new GradleException("Missing ontrackVersion property")
        if (!commit) throw new GradleException("Missing ontrackVersionCommit property")
        println "[${name}] Creating release ${tag} from commit ${commit}..."
        releaseId = gitHubPost(
                "https://api.github.com",
                "/repos/${repository}/releases",
                [
                        target_commitish: commit,
                        tag_name        : tag,
                        name            : tag,
                ]
        ).id
        println "[${name}] Release ID = ${releaseId}"
    }

    String getReleaseId() {
        releaseId
    }
}

class GitHubReleaseUpload extends GitHubTask {

    String releaseId
    String fileName
    String fileType
    File file

    @TaskAction
    void run() {
        // Release ID
        if (!releaseId) {
            releaseId = taskDependencies.getDependencies(this).find { it instanceof GitHubReleaseCreate }.releaseId
        }
        println "[${name}] Uploading ${file} as ${fileName} to release ${releaseId}..."
        // Upload URL
        String url = "https://uploads.github.com"
        String path = "/repos/${repository}/releases/${releaseId}/assets?name=${fileName}"
        // Client
        def client = createJsonClient(url)
        // Upload
        client.upload(
                new Document(
                        fileType,
                        file.bytes
                ),
                path
        )
    }

}

class GitHubReleaseDescription extends GitHubTask {

    @TaskAction
    void run() {
        // Release ID
        def releaseId = taskDependencies.getDependencies(this).find { it instanceof GitHubReleaseCreate }.releaseId
        // Ontrack change log
        def changeLog = taskDependencies.getDependencies(this).find { it instanceof OntrackChangeLog }.changeLog
        // Logging
        println "[${name}] Setting change log of release ${releaseId}\n${changeLog}"
        // Call
        gitHubPost(
                "https://api.github.com",
                "/repos/${repository}/releases/${releaseId}",
                [
                        body: changeLog,
                ]
        )
    }

}

/**
 * Publication tasks
 */

task publicationGitHubReleaseCreate(type: GitHubReleaseCreate) {
    commit = ontrackVersionCommit // VERSION_COMMIT
    tag = ontrackVersion          // VERSION_DISPLAY
}

task publicationGitHubReleaseJarUpload(type: GitHubReleaseUpload) {
    dependsOn publicationGitHubReleaseCreate
    fileName = 'ontrack.jar'
    fileType = 'application/zip'
    file = project.file("publication/ontrack-ui-${ontrackVersion}.jar")
}

task publicationGitHubReleaseJarShellUpload(type: GitHubReleaseUpload) {
    dependsOn publicationGitHubReleaseCreate
    fileName = 'ontrack-dsl-shell.jar'
    fileType = 'application/zip'
    file = project.file("publication/ontrack-dsl-${ontrackVersion}-shell.jar")
}

task publicationGitHubReleasePostgresqlMigrationUpload(type: GitHubReleaseUpload) {
    dependsOn publicationGitHubReleaseCreate
    fileName = 'ontrack-postgresql-migration.jar'
    fileType = 'application/zip'
    file = project.file("publication/ontrack-postgresql-migration-${ontrackVersion}.jar")
}

task publicationGitHubReleaseDebianUpload(type: GitHubReleaseUpload) {
    dependsOn publicationGitHubReleaseCreate
    fileName = 'ontrack.deb'
    fileType = 'application/x-debian-package'
    file = project.file("ontrack_${ontrackVersion.replaceAll(/[^0-9\.-_]/, '')}-1_all.deb")
}

task publicationGitHubReleaseRpmUpload(type: GitHubReleaseUpload) {
    dependsOn publicationGitHubReleaseCreate
    fileName = 'ontrack.rpm'
    fileType = 'application/x-rpm'
    file = project.file("ontrack-${ontrackVersion.replaceAll(/[^0-9\.-_]/, '')}-1.noarch.rpm")
}

task publicationGitHubReleasePdfUpload(type: GitHubReleaseUpload) {
    dependsOn publicationGitHubReleaseCreate
    fileName = 'ontrack.pdf'
    fileType = 'application/pdf'
    file = project.file('publication/pdf/index.pdf')
}

task publicationGitHubReleaseUpload {
    dependsOn publicationGitHubReleaseJarUpload
    dependsOn publicationGitHubReleasePostgresqlMigrationUpload
    dependsOn publicationGitHubReleaseJarShellUpload
    dependsOn publicationGitHubReleaseDebianUpload
    dependsOn publicationGitHubReleaseRpmUpload
    dependsOn publicationGitHubReleasePdfUpload
}

task publicationOntrackChangeLog(type: OntrackChangeLog) {
    ontrackReleaseBranch = project.properties.ontrackReleaseBranch
    mustRunAfter publicationGitHubReleaseUpload
}

task publicationGitHubReleaseDescription(type: GitHubReleaseDescription) {
    dependsOn publicationGitHubReleaseCreate
    dependsOn publicationOntrackChangeLog
}

task publicationGitHubRelease {
    dependsOn publicationGitHubReleaseCreate
    dependsOn publicationGitHubReleaseUpload
    dependsOn publicationOntrackChangeLog
    dependsOn publicationGitHubReleaseDescription
}

/**
 * Root tasks
 */

task publicationMaven {
    description = "Publication of the DSL library to the Maven Central"
    dependsOn 'uploadArchives'
    dependsOn 'closeRepository'
    dependsOn 'promoteRepository'
}
closeRepository.mustRunAfter uploadArchives
promoteRepository.mustRunAfter closeRepository
promoteRepository {
    doFirst {
        println "Waiting 30s before launching the repository promotion"
        sleep 30000
    }
}

task publicationRelease {
    dependsOn publicationMaven
    dependsOn publicationGitHubRelease
}

// Makes sure to not create a tag if the Maven publication is not OK

publicationGitHubRelease.mustRunAfter publicationMaven
